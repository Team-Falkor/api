generator client {
  provider = "prisma-client-js"
  // output   = "../prisma/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  username          String    @unique
  password          String
  isOnline          Boolean   @default(false)
  role              Role      @default(USER)
  refreshToken      String?
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Provider {
  id        Int      @id @default(autoincrement())
  setupUrl  String   @unique
  setupJSON Json
  name      String   @unique
  official  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  failureCount Int     @default(0)
  approved     Boolean @default(false)
}

model HealthCheckState {
  id                      Int      @id @default(1)
  lastCheckCompletionTime DateTime
  wasLastCheckSuccessful  Boolean
}

// Analytics models focused on privacy and GDPR compliance

model PageView {
  id         String   @id @default(uuid())
  path       String // URL path visited
  timestamp  DateTime @default(now())
  // Anonymized visitor data
  sessionId  String // Hashed session identifier
  deviceType String? // Mobile, desktop, tablet
  browser    String? // Browser type
  country    String? // Country code only

  // No IP addresses or personal identifiers stored
  @@index([timestamp])
  @@index([path])
}

model EventLog {
  id        String   @id @default(uuid())
  eventType String // Type of interaction
  context   Json? // Additional anonymous context
  timestamp DateTime @default(now())
  sessionId String // Hashed session identifier
  path      String // URL where event occurred

  @@index([eventType])
  @@index([timestamp])
}

model AggregateMetrics {
  id         String   @id @default(uuid())
  metricType String // Type of metric being aggregated
  value      Int // Aggregated value
  period     String // Aggregation period (hourly, daily, weekly, monthly)
  startTime  DateTime // Start of aggregation period
  endTime    DateTime // End of aggregation period

  @@unique([metricType, period, startTime])
  @@index([metricType, period])
}

model DataRetentionPolicy {
  id                    Int      @id @default(autoincrement())
  dataType              String   @unique
  retentionDays         Int
  anonymizationRequired Boolean  @default(true)
  lastCleanup           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Phase {
  PRE_LAUNCH
  LAUNCH
  POST_LAUNCH
  FUTURE
}

enum Status {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

model RoadmapEvent {
  id     Int                @id @default(autoincrement())
  phase  Phase              @unique
  status Status
  items  RoadmapEventItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadmapEventItem {
  id             Int           @id @default(autoincrement())
  title          String
  completed      Boolean
  category       String?
  RoadmapEvent   RoadmapEvent? @relation(fields: [roadmapEventId], references: [id])
  roadmapEventId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
