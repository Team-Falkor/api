generator client {
  provider = "prisma-client-js"
  // output   = "../prisma/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Provider {
  id        Int      @id @default(autoincrement())
  setupUrl  String   @unique
  setupJSON Json
  name      String   @unique
  official  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  failureCount Int     @default(0)
  approved     Boolean @default(false)
}

model HealthCheckState {
  id                      Int      @id @default(1)
  lastCheckCompletionTime DateTime
  wasLastCheckSuccessful  Boolean
}

// Analytics models focused on privacy and GDPR compliance

model PageView {
  id         String   @id @default(uuid())
  path       String // URL path visited
  timestamp  DateTime @default(now())
  // Anonymized visitor data
  sessionId  String // Hashed session identifier
  deviceType String? // Mobile, desktop, tablet
  browser    String? // Browser type
  country    String? // Country code only

  // No IP addresses or personal identifiers stored
  @@index([timestamp])
  @@index([path])
}

model EventLog {
  id        String   @id @default(uuid())
  eventType String // Type of interaction
  context   Json? // Additional anonymous context
  timestamp DateTime @default(now())
  sessionId String // Hashed session identifier
  path      String // URL where event occurred

  @@index([eventType])
  @@index([timestamp])
}

model AggregateMetrics {
  id         String   @id @default(uuid())
  metricType String // Type of metric being aggregated
  value      Int // Aggregated value
  period     String // Aggregation period (hourly, daily, weekly, monthly)
  startTime  DateTime // Start of aggregation period
  endTime    DateTime // End of aggregation period

  @@unique([metricType, period, startTime])
  @@index([metricType, period])
}

model DataRetentionPolicy {
  id                    Int      @id @default(autoincrement())
  dataType              String   @unique
  retentionDays         Int
  anonymizationRequired Boolean  @default(true)
  lastCleanup           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Phase {
  PRE_LAUNCH
  LAUNCH
  POST_LAUNCH
  FUTURE
}

enum Status {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

model RoadmapEvent {
  id     Int                @id @default(autoincrement())
  phase  Phase              @unique
  status Status
  items  RoadmapEventItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadmapEventItem {
  id             Int           @id @default(autoincrement())
  title          String
  completed      Boolean
  category       String?
  RoadmapEvent   RoadmapEvent? @relation(fields: [roadmapEventId], references: [id])
  roadmapEventId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaveDataInfo {
  id       Int     @id @default(autoincrement())
  steamId  String  @unique
  gameName String?

  // Save locations
  windows String?
  mac     String?
  linux   String?

  // Metadata
  lastFetched DateTime @default(now())
  isValid     Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([steamId])
  @@index([lastFetched])
  @@map("save_data_info")
}

model User {
  id              String    @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  sessions        Session[]
  accounts        Account[]

  // Cloud lists
  lists     List[]
  gameStats GameStat[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model List {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  listGames ListGame[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id      Int    @id @default(autoincrement())
  name    String @unique
  igdbID  Int    @unique
  steamID Int?   @unique

  listGames ListGame[]
  gameStats GameStat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListGame {
  id      Int      @id @default(autoincrement())
  listId  Int
  gameId  Int
  addedAt DateTime @default(now())

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listId, gameId])
  @@index([listId])
  @@index([gameId])
}

model GameStat {
  id     Int    @id @default(autoincrement())
  gameId Int
  userId String

  playtime   Int
  lastPlayed DateTime?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId])
  @@index([userId])
  @@index([gameId])
}
